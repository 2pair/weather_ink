#include "Renderer.h"

#include <Inkplate.h>
#include <ArduinoJson.h>
// Including fonts used
#include "../Fonts/Inter16pt7b.h"
#include "../Fonts/Inter20pt7b.h"
#include "../Fonts/Inter36pt7b.h"
#include "../Fonts/Inter48pt7b.h"
#include "../Fonts/Inter120pt7b.h"
// Including icons generated by the py file
//#include "icons.h"

#include "DailyWeather.h"
#include "Weather.h"

using namespace renderer;

// Declared week days
static char wDays[8][10] = {
    "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",
};


// Constants used for drawing icons
char abbrs[32][32] = {"01d", "02d", "03d", "04d", "09d", "10d", "11d", "13d", "50d",
                      "01n", "02n", "03n", "04n", "09n", "10n", "11n", "13n", "50n"};
// const uint8_t *logos[18] = {
//     icon_01d, icon_02d, icon_03d, icon_04d, icon_09d, icon_10d, icon_11d, icon_13d, icon_50d,
//     icon_01n, icon_02n, icon_03n, icon_04n, icon_09n, icon_10n, icon_11n, icon_13n, icon_50n,
// };

// const uint8_t *s_logos[18] = {
//     icon_s_01d, icon_s_02d, icon_s_03d, icon_s_04d, icon_s_09d, icon_s_10d, icon_s_11d, icon_s_13d, icon_s_50d,
//     icon_s_01n, icon_s_02n, icon_s_03n, icon_s_04n, icon_s_09n, icon_s_10n, icon_s_11n, icon_s_13n, icon_s_50n,
// };

// Variables for storing temperature
RTC_DATA_ATTR char temps[4][8] = {
    "-",
    "-",
    "-",
    "-",
};

// Variables for storing hour strings
RTC_DATA_ATTR uint8_t hours = 0;

// Variables for storing current time and weather info
RTC_DATA_ATTR char currentTemp[16] = "-";
RTC_DATA_ATTR char currentWind[16] = "-";


RTC_DATA_ATTR char currentWeather[32] = "-";
RTC_DATA_ATTR char currentWeatherAbbr[8] = "01d";

RTC_DATA_ATTR char abbr1[16];
RTC_DATA_ATTR char abbr2[16];
RTC_DATA_ATTR char abbr3[16];
RTC_DATA_ATTR char abbr4[16];

Renderer::Renderer(Inkplate& display, const char* city)
    :   mDisplay(display),
        cCity(city)
{}

void Renderer::update(const weather::Weather& weatherData)
{
    drawConditions(weatherData.getDailyWeather(0));
    //drawCurrent();
    drawTemps(weatherData.getDailyWeather(0));
    drawLocation();
    //drawTime();
}

void Renderer::render() {
    mDisplay.display();
}

// Function for drawing weather info
void Renderer::drawConditions(const weather::DailyWeather& currentConditions)
{
    // Searching for weather state abbreviation
    // for (int i = 0; i < 18; ++i)
    // {
    //     // If found draw specified icon
    //     if (strcmp(abbrs[i], currentWeatherAbbr) == 0)
    //         display.drawBitmap(50, 50, logos[i], 152, 152, BLACK);
    // }

    // Draw weather state
    mDisplay.setTextColor(BLACK, WHITE);
    mDisplay.setFont(&Inter48pt7b);
    mDisplay.setTextSize(1);
    mDisplay.setCursor(600, 200);
    mDisplay.printf("%d%cF", (int)currentConditions.tempNow, (char)(247));

    mDisplay.setFont(&Inter36pt7b);
    mDisplay.setTextSize(1);
    auto conditions = weather::conditionToString(currentConditions.condition);
    mDisplay.setCursor(775 - 45 * strlen((const char*)conditions), 300);
    mDisplay.println(conditions);
}

// Function for drawing current time
// void drawTime()
// {
//     // Drawing current time
//     mDisplay.setTextColor(BLACK, WHITE);
//     mDisplay.setFont(&Inter16pt7b);
//     mDisplay.setTextSize(1);

//     mDisplay.setCursor(800 - 20 * strlen(currentTime), 35);
//     mDisplay.println(currentTime);
// }

// Function for drawing city name
void Renderer::drawLocation()
{
    // Drawing city name
    mDisplay.setTextColor(BLACK, WHITE);
    mDisplay.setFont(&Inter36pt7b);
    mDisplay.setTextSize(1);

    mDisplay.setCursor(775 - 50 * strlen(cCity), 570);
    mDisplay.println(cCity);
}

// Function for drawing temperatures
void Renderer::drawTemps(const weather::DailyWeather& currentConditions)
{
    // Drawing 4 black rectangles in which temperatures will be written
    int height = 175;
    int width = 370;
    int spacing = (600 - height * 3) / 4;

    mDisplay.fillRect(20, 1 * spacing + 0 * height, 20 + width, height, 6);
    mDisplay.fillRect(20, 2 * spacing + 1 * height, 20 + width, height, 5);
    mDisplay.fillRect(20, 3 * spacing + 2 * height, 20 + width, height, 4);
/*
    int textMargin = 6;

    mDisplay.setFont(&Inter20pt7b);
    mDisplay.setTextSize(1);
    mDisplay.setTextColor(WHITE, BLACK);

    mDisplay.setCursor(1 * rectSpacing + 0 * rectWidth + textMargin, 300 + textMargin + 40);
    mDisplay.println("Today");

    mDisplay.setCursor(2 * rectSpacing + 1 * rectWidth + textMargin, 300 + textMargin + 40);
    mDisplay.println(wDays[hours + 1 > 6 ? hours + 1 - 6 : hours + 1]);

    mDisplay.setCursor(3 * rectSpacing + 2 * rectWidth + textMargin, 300 + textMargin + 40);
    mDisplay.println(wDays[hours + 2 > 6 ? hours + 2 - 6 : hours + 2]);

    mDisplay.setCursor(4 * rectSpacing + 3 * rectWidth + textMargin, 300 + textMargin + 40);
    mDisplay.println(wDays[hours + 3 > 6 ? hours + 3 - 6 : hours + 3]);

    // Drawing temperature values into black rectangles
    mDisplay.setFont(&Inter20pt7b);
    mDisplay.setTextSize(1);
    mDisplay.setTextColor(WHITE, BLACK);

    mDisplay.setCursor(1 * rectSpacing + 0 * rectWidth + textMargin, 300 + textMargin + 120);
    mDisplay.print(temps[0]);
    mDisplay.println(F("C"));

    mDisplay.setCursor(2 * rectSpacing + 1 * rectWidth + textMargin, 300 + textMargin + 120);
    mDisplay.print(temps[1]);
    mDisplay.println(F("C"));

    mDisplay.setCursor(3 * rectSpacing + 2 * rectWidth + textMargin, 300 + textMargin + 120);
    mDisplay.print(temps[2]);
    mDisplay.println(F("C"));

    mDisplay.setCursor(4 * rectSpacing + 3 * rectWidth + textMargin, 300 + textMargin + 120);
    mDisplay.print(temps[3]);
    mDisplay.println(F("C"));

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr1, abbrs[i]) == 0)
            mDisplay.drawBitmap(1 * rectSpacing + 0 * rectWidth + textMargin, 300 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr2, abbrs[i]) == 0)
            mDisplay.drawBitmap(2 * rectSpacing + 1 * rectWidth + textMargin, 300 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr3, abbrs[i]) == 0)
            mDisplay.drawBitmap(3 * rectSpacing + 2 * rectWidth + textMargin, 300 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }

    for (int i = 0; i < 18; ++i)
    {
        // If found draw specified icon
        if (strcmp(abbr4, abbrs[i]) == 0)
            mDisplay.drawBitmap(4 * rectSpacing + 3 * rectWidth + textMargin, 300 + textMargin + 150, s_logos[i], 48, 48,
                               WHITE, BLACK);
    }*/
}

// Current weather drawing function
// void Renderer::drawForecast()
// {
//     // Drawing current information

//     // Temperature:
//     mDisplay.setFont(&Inter48pt7b);
//     mDisplay.setTextSize(1);
//     mDisplay.setTextColor(BLACK, WHITE);

//     mDisplay.setCursor(245, 150);
//     mDisplay.print(currentTemp);

//     int x = mDisplay.getCursorX();
//     int y = mDisplay.getCursorY();

//     mDisplay.setFont(&Inter20pt7b);
//     mDisplay.setTextSize(1);

//     mDisplay.setCursor(x, y);

//     mDisplay.println(F("C"));

//     // Wind:
//     mDisplay.setFont(&Inter48pt7b);
//     mDisplay.setTextSize(1);
//     mDisplay.setTextColor(BLACK, WHITE);

//     mDisplay.setCursor(480, 150);
//     mDisplay.print(currentWind);

//     x = mDisplay.getCursorX();
//     y = mDisplay.getCursorY();

//     mDisplay.setFont(&Inter20pt7b);
//     mDisplay.setTextSize(1);

//     mDisplay.setCursor(x, y);

//     mDisplay.println(F("m/s"));

//     // Labels underneath
//     mDisplay.setFont(&Inter16pt7b);
//     mDisplay.setTextSize(1);

//     mDisplay.setCursor(215, 210);
//     mDisplay.println(F("TEMPERATURE"));

//     mDisplay.setCursor(500, 210);
//     mDisplay.println(F("WIND SPEED"));
// }
